git init 创建仓库 将此目录设为仓库
git add xxx.txt 添加到仓库暂存区  后面加一个“.”，匹配所有的文件 
git add -u  --update    更新所有改变的文件，即提交所有变化的文件
git commit -m "注释" 确认提交进仓库分支

git status 查看仓库状态
git diff  查看修改内容（difference）
git log 查看提交日志 可加--pretty=oneline

git reset --hard HEAD^ 返回上一版本
git reflog 用来记录你的每一次命令（借此可查询版本号）
git checkout -- xxx.txt 用版本库里的版本替换工作区的版本 把文件在工作区的修改全部撤销，重置为版本库的最新版本（如果添加到了暂存区，则回退至暂存区的版本）
git rm test.txt 删除版本库里的文件

git remote add origin git@server-name:path/repo-name.git； 关联一个远程库
git push -u origin master 关联后，使用命令第一次推送master分支的所有内容；
git push origin master 此后，每次本地提交后，只要有必要，就可以使用命令推送最新修改；
git clone git@github.com:xxx/xxx.git 远程克隆

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name> --no-ff参数是普通模式合并，分支有历史，而默认fast forward没有历史
删除分支：git branch -d <name>  -D 强行删除
注意：分支之间的冲突只能手动解决（通过新建一个合理的分支）
git stash 保留当前工作现场（新建当前节点的其他分支之前保留，修复后，再git stash pop，回到工作现场）
git stash apply 也是回到工作现场 与上不同的是 stash内容会被保留，恢复后需要手动删除
git stash list 查看工作环境

git pull抓取远程的新提交
git branch --set-upstream branch-name origin/branch-name 建立本地分支和远程分支的关联

git rebase 通过变基 合并

git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag可以查看所有标签。
git push origin <tagname>可以推送一个本地标签；
git push origin --tags可以推送全部未推送过的本地标签；
git tag -d <tagname>可以删除一个本地标签；
git push origin :refs/tags/<tagname>可以删除一个远程标签。

多人协作的工作模式通常是这样：
	1.首先，可以试图用git push origin <branch-name>推送自己的修改；
	2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3.如果合并有冲突，则解决冲突，并在本地提交；
	4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
